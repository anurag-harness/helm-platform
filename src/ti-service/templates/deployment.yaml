apiVersion: apps/v1
kind: Deployment
metadata:
  name: ti-service
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ti-service.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  selector:
    matchLabels:
      {{- include "ti-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ti-service.selectorLabels" . | nindent 8 }}
    spec:
      {{ include "ti-service.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "ti-service.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      initContainers:
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      {{- end }}
      {{- if .Values.global.database.timescaledb.installed }}  
      - name: wait-for-timescale
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=timescaledb-single-chart"
      {{- end }}
      containers:
        - name: ti-service
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
              {{- toYaml .Values.securityContext | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: http-ti-service
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: http-ti-service
            initialDelaySeconds: 10
            periodSeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports:
          - name: http-ti-service
            containerPort: {{.Values.service.port}}
            protocol: "TCP"
          env:
          {{- include "harnesscommon.dbconnection.mongoEnv" . | indent 10 }}
          - name: TI_SERVICE_MONGODB_CONN_STR
            value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "ti-harness" "context" $) }}
          {{- if .Values.global.database.timescaledb.installed }}
          - name: TI_SERVICE_TIMESCALE_USERNAME
            value: "postgres"
          - name: TI_SERVICE_TIMESCALE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.tiServiceTimescaleSecret.password.name }}
                key: {{ .Values.tiServiceTimescaleSecret.password.key }}
          - name: TI_SERVICE_TIMESCALE_HOST
            value: timescaledb-single-chart.{{ .Release.Namespace }}
          - name: TI_SERVICE_TIMESCALE_PORT
            value: "5432"
          {{- else }}
            {{ include "harnesscommon.dbconnection.dbenvuser" (dict "type" "timescale" "variableName" "TI_SERVICE_TIMESCALE_USERNAME" "secret" .Values.global.database.timescaledb.secretName "userKey" .Values.global.database.timescaledb.userKey ) | nindent 10 }}
            {{ include "harnesscommon.dbconnection.dbenvpassword" (dict "type" "timescale" "variableName" "TI_SERVICE_TIMESCALE_PASSWORD" "secret" .Values.global.database.timescaledb.secretName "passwordKey" .Values.global.database.timescaledb.passwordKey ) | nindent 10 }}
          - name: TI_SERVICE_TIMESCALE_HOST
            value: {{ (split ":" (index .Values.global.database.timescaledb.hosts 0))._0 }}
          - name: TI_SERVICE_TIMESCALE_PORT
            value: {{ (split ":" (index .Values.global.database.timescaledb.hosts 0))._1 | quote }}
          - name: TI_SERVICE_TIMESCALE_ENABLE_SSL
            value: "true"
          - name: TI_SERVICE_TIMESCALE_SSL_MODE
            value: "verify-full"
          - name: TI_SERVICE_TIMESCALE_SSL_CERT_PATH
            value: "/opt/harness/svc/timescale_ca.pem"
          {{- end }}
          envFrom:
          - configMapRef:
              name: ti-service
      {{- if not .Values.global.database.timescaledb.installed }}
          volumeMounts:
          - name: timescaledb-cert
            mountPath: /opt/harness/svc
      volumes:
      - name: timescaledb-cert
        secret:
          secretName: {{ .Values.global.database.timescaledb.certName }}
          items:
          - key: {{ .Values.global.database.timescaledb.certKey }}
            path: timescale_ca.pem
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - ti-service
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

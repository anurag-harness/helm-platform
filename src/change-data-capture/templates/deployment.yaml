apiVersion: apps/v1
kind: Deployment
metadata:
  name: change-data-capture
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "change-data-capture.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "change-data-capture.selectorLabels" . | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{.Values.maxSurge}}
      maxUnavailable: {{.Values.maxUnavailable}}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: change-data-capture
        {{- include "change-data-capture.selectorLabels" . | nindent 8 }}
    spec:
      {{ include "change-data-capture.pullSecrets" . | nindent 6 }}
      serviceAccountName: {{ include "change-data-capture.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 30
      initContainers:
      {{- if .Values.global.database.mongo.installed }}
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      {{- end }}    
      - name: wait-for-timescale
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=timescaledb-single-chart"
      - name: wait-for-ng-manager
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=ng-manager"
      containers:
        - name: change-data-capture
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
              {{- toYaml .Values.securityContext | nindent 12 }}
          env:
            {{- include "harnesscommon.dbconnection.mongoEnv" . | indent 12 }}
            {{- if .Values.global.database.timescaledb.installed }}
            - name: TIMESCALEDB_USERNAME
              value: postgres
            - name : TIMESCALEDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.timescaleSecret.password.name }}
                  key: {{ .Values.timescaleSecret.password.key }}
            - name: TIMESCALEDB_URI
              value: 'jdbc:postgresql://timescaledb-single-chart.{{ .Release.Namespace }}:5432/harness'
            {{- else }}
            {{ include "harnesscommon.dbconnection.dbenvuser" (dict "type" "timescale" "variableName" "TIMESCALEDB_USERNAME" "secret" .Values.global.database.timescaledb.secretName "userKey" .Values.global.database.timescaledb.userKey ) | nindent 12 }}
            {{ include "harnesscommon.dbconnection.dbenvpassword" (dict "type" "timescale" "variableName" "TIMESCALEDB_PASSWORD" "secret" .Values.global.database.timescaledb.secretName "passwordKey" .Values.global.database.timescaledb.passwordKey ) | nindent 12 }}
            - name: TIMESCALEDB_URI
              value: 'jdbc:postgresql://{{ index .Values.global.database.timescaledb.hosts 0}}/harness'
            - name: TIMESCALEDB_SSL_MODE
              value: "require"
            - name: TIMESCALEDB_SSL_ROOT_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.database.timescaledb.certName }}
                  key: {{ .Values.global.database.timescaledb.certKey }}
            {{- end }}
            - name: MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "harness" "context" $) }}
            - name: EVENTS_MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "events" "context" $) }}
            - name: PMS_MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "pms-harness" "context" $) }}
            - name: CDC_MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "change-data-capture" "context" $) }}
            - name: NG_HARNESS_MONGO_URI
              value: {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "ng-harness" "context" $) }}
          envFrom:
          - configMapRef:
              name: change-data-capture
          resources:
              {{- toYaml .Values.resources | nindent 12 }}
          {{- toYaml .Values.probes | nindent 10}}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - change-data-capture
            topologyKey: "kubernetes.io/hostname"
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

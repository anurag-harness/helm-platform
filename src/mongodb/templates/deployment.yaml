apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-replicaset
  namespace: {{ .Release.Namespace }}
  labels:
    app: mongo-replicaset
spec:
  selector:
    matchLabels:
      app: mongo-replicaset
  serviceName: mongo-replicaset
  replicas: {{.Values.replicas}}
  template:
    metadata:
      labels:
        app: mongo-replicaset
    spec:   
      nodeSelector:
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      imagePullSecrets:
      - name: regcred
      initContainers:
        - name: copy-config
          image:
              registry: docker.io
              repository: bitnami/mongodb
              tag: 4.2.19
              digest: ""
              imagePullSecrets: []
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
            - name: keydir
              mountPath: /keydir-readonly
            - name: datadir
              mountPath: /data/db
        - name: install
          image:
              registry: docker.io
              repository: bitnami/mongodb
              tag: 4.2.19
              digest: ""
              imagePullSecrets: []
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: bootstrap
          image:
              registry: docker.io
              repository: bitnami/mongodb
              tag: 4.2.19
              digest: ""
              imagePullSecrets: []
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: AUTH
              value: "true"
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "mongo-replicaset-admin"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "mongo-replicaset-admin"
                  key: password
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongo-replicaset
          livenessProbe:
            initialDelaySeconds: 60
            timeoutSeconds: 10
            failureThreshold: 10
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          image:
              registry: docker.io
              repository: bitnami/mongodb
              tag: 4.2.19
              digest: ""
              imagePullSecrets: []
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: mongo
              containerPort: 27017
          resources:
            limits:
              cpu: {{.Values.cpu | quote}}
              memory: {{.Values.memory}}
            requests:
              cpu: {{.Values.cpu | quote}}
              memory: {{.Values.memory}}
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
      volumes:
        - name: config
          configMap:
            name: mongo-replicaset
        - name: init
          configMap:
            defaultMode: 493
            name: mongo-replicaset-init
        - name: keydir
          secret:
            defaultMode: 256
            secretName: mongo-replicaset-keyfile
        - name: workdir
          emptyDir: {}
        - name: configdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: {{.Values.storageClass}}
        resources:
          requests:
            storage: {{.Values.storageSize}}      
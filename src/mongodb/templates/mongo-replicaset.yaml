apiVersion: v1
kind: Service
metadata:
  name: mongo-replicaset
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: mongo
      port: 27017
  selector:
    app: mongo-replicaset
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-replicaset
  labels:
    app: mongo-replicaset
spec:
  selector:
    matchLabels:
      app: mongo-replicaset
  serviceName: mongo-replicaset
  replicas: {{.Values.replicas}}
  template:
    metadata:
      labels:
        app: mongo-replicaset
        created_by: {{.Values.created_by | replace "@" "-"}}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9216"
        prometheus.io/path: "/metrics"
    spec:   
      nodeSelector:
        cloud.google.com/gke-preemptible: "true"
      tolerations:
        - effect: "NoSchedule"
          key: "cloud.google.com/gke-preemptible"
          value: "true"
          operator: "Equal" 
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      imagePullSecrets:
      - name: regcred
      initContainers:
        - name: copy-config
          image: {{.Values.busyboxImage}}
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x
              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
              cp /keydir-readonly/key.txt /data/configdb/key.txt
              chmod 600 /data/configdb/key.txt
              touch /data/db/test.txt
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
            - name: keydir
              mountPath: /keydir-readonly
            - name: datadir
              mountPath: /data/db
        - name: install
          image: {{.Values.mongoinstallImage}}
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: bootstrap
          image: {{.Values.mongoImage}}
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service=mongo-replicaset"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: AUTH
              value: "true"
            - name: ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: "mongo-replicaset-admin"
                  key: user
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "mongo-replicaset-admin"
                  key: password
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongo-replicaset
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 60
            timeoutSeconds: 10
            failureThreshold: 10
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          image: {{.Values.mongoImage}}
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: mongo
              containerPort: 27017
          resources:
            limits:
              cpu: {{.Values.cpu | quote}}
              memory: {{.Values.memory}}
            requests:
              cpu: {{.Values.cpu | quote}}
              memory: {{.Values.memory}}
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=/data/db
            - --replSet=rs0
            - --port=27017
            - --bind_ip=0.0.0.0
            - --auth
            - --keyFile=/data/configdb/key.txt
            - --wiredTigerCacheSizeGB={{.Values.wiredTigerCacheSizeGB}}
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
      volumes:
        - name: config
          configMap:
            name: mongo-replicaset
        - name: init
          configMap:
            defaultMode: 493
            name: mongo-replicaset-init
        - name: keydir
          secret:
            defaultMode: 256
            secretName: mongo-replicaset-keyfile
        - name: workdir
          emptyDir: {}
        - name: configdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        storageClassName: {{.Values.storageClass}}
        resources:
          requests:
            storage: {{.Values.storageSize}}
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mongo-replicaset
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mongo-replicaset             